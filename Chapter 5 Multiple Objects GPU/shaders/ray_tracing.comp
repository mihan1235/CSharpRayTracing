#version 430

layout( local_size_x = 10, local_size_y = 10 ) in;

layout( binding = 0, rgba8) uniform image2D ColorImg;

layout(std430, binding=0) buffer Sphere_Pos {
	vec4 Sphere[];
	//first 3 coordinates are sphere position and the
	//last is radius of the sphere.
};

uniform int width = 800;
uniform int height = 600;

struct Ray{
	vec3 origin;
	vec3 direction;
};

struct hit_record{
	float t;
	vec3 p;
	vec3 normal;
};


vec3 point_at_parameter(float t, in Ray r){
	return r.origin + t * r.direction;
}

bool hit_sphere(in Ray r, vec3 center,float radius,float t_min,
				float t_max, out hit_record rec)
{
	vec3 oc = r.origin - center;
    float a = dot(r.direction, r.direction);
    float b = 2.0f * dot(oc, r.direction);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4*a*c;
    if (discriminant > 0) {
        float temp = (-b - sqrt(discriminant))/(2.0f*a);
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(rec.t,r);
            rec.normal = normalize(rec.p - center);
            return true;
        }
        temp = (-b + sqrt(discriminant)) / (2.0f*a);
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(rec.t,r);
            rec.normal = normalize(rec.p - center);
            return true;
        }
    }
    return false;
}

bool hit_all_spheres(in Ray r,float t_min, float t_max, inout hit_record rec){
	bool hit_anything = false;
	for(int i =0; i< Sphere.length(); i++){
		if (hit_sphere(r,vec3(Sphere[i].x,Sphere[i].y,Sphere[i].z),Sphere[i].w,t_min,t_max,rec)){
			hit_anything = true;
			return hit_anything;
		}
	}
	return hit_anything;
}



vec3 Color(Ray r) {
	hit_record rec;
	if (hit_all_spheres(r,0.0,3,rec)){
		return 0.5 * vec3(rec.normal.x + 1 , rec.normal.y + 1, rec.normal.z + 1);
	}
    vec3 unit_direction = normalize(r.direction);
	float t = 0.5f * (unit_direction.y + 1.0f);
    return (1.0f - t) * vec3(1.0f, 1.0f, 1.0f) + t * vec3(0.5f,0.7f,1.0f);
}

void main() {
	vec3 lower_left_corner = vec3(-2.0f,-1.0f,-1.0f);
    vec3 horizontal = vec3(4.0f,0.0f,0.0f);
    vec3 origin = vec3(0.0f,0.0f,0.0f);
    vec3 vertical = vec3(0.0f,2.0f,0.0f);

	float i = gl_GlobalInvocationID.x;
	float j = height - gl_GlobalInvocationID.y;
	float u = i / width;
    float v = j / height;
	vec3 color = Color(Ray(origin,lower_left_corner+ u *horizontal+v*vertical));
	imageStore(ColorImg,ivec2(gl_GlobalInvocationID.xy), vec4(color,1));
}
