#version 430

layout( local_size_x = 10, local_size_y = 10 ) in;

layout( binding = 0, rgba8) uniform image2D ColorImg;

layout(std430, binding=0) buffer Sphere_Pos {
	vec4 Sphere[];
	//first 3 coordinates are sphere position and the
	//last is radius of the sphere.
};

uniform int width = 800;
uniform int height = 600;


/////////////////////////////////////////////////////////////////
//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
	return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v){
	const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
	// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);

	// Other corners
	vec2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    // x0 = x0 - 0.0 + 0.0 * C.xx ;
    // x1 = x0 - i1 + 1.0 * C.xx ;
    // x2 = x0 - 1.0 + 2.0 * C.xx ;
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;

	// Permutations
    i = mod289(i); // Avoid truncation effects in permutation
    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
    m = m*m ;
    m = m*m ;

	// Gradients: 41 points uniformly over a line, mapped onto a diamond.
	// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;

	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

	// Compute final noise value at P
    vec3 g;
    g.x  = a0.x  * x0.x  + h.x  * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

float inc = (gl_GlobalInvocationID.x + gl_GlobalInvocationID.y) * (gl_GlobalInvocationID.y);
int k =0;

float noise(){
	float result = snoise(vec2(inc , inc + 14*k));
	if (result < 0) {
		result = abs(result);
	}
	if (result == 1){
		return result - 0.1f;
	}
	k++;
	return result;
}

/////////////////////////////////////////////////////////////////

struct Ray{
	vec3 origin;
	vec3 direction;
};

struct Camera{
	vec3 lower_left_corner;
    vec3 horizontal;
    vec3 origin;
    vec3 vertical;
};

uniform Camera camera = Camera(vec3(-2.0f,-1.0f,-1.0f),vec3(4.0f,0.0f,0.0f),vec3(0.0f,0.0f,0.0f),vec3(0.0f,2.0f,0.0f));

Ray get_ray(float u, float v){
	return Ray(camera.origin,camera.lower_left_corner+ u *camera.horizontal+v*camera.vertical);
}

struct hit_record{
	float t;
	vec3 p;
	vec3 normal;
};


vec3 point_at_parameter(float t, in Ray r){
	return r.origin + t * r.direction;
}

bool hit_sphere(in Ray r, vec3 center,float radius,float t_min,
				float t_max, out hit_record rec)
{
	vec3 oc = r.origin - center;
    float a = dot(r.direction, r.direction);
    float b = 2.0f * dot(oc, r.direction);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = b*b - 4*a*c;
    if (discriminant > 0) {
        float temp = (-b - sqrt(discriminant))/(2.0f*a);
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(rec.t,r);
            rec.normal = normalize(rec.p - center);
            return true;
        }
        temp = (-b + sqrt(discriminant)) / (2.0f*a);
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = point_at_parameter(rec.t,r);
            rec.normal = normalize(rec.p - center);
            return true;
        }
    }
    return false;
}

bool hit_all_spheres(in Ray r,float t_min, float t_max, inout hit_record rec){
	bool hit_anything = false;
	for(int i =0; i< Sphere.length(); i++){
		if (hit_sphere(r,vec3(Sphere[i].x,Sphere[i].y,Sphere[i].z),Sphere[i].w,t_min,t_max,rec)){
			hit_anything = true;
			return hit_anything;
		}
	}
	return hit_anything;
}


vec3 random_in_unit_sphere(){
	vec3 p;
	do {
		p = normalize(2.0 * vec3(noise(),noise(),noise()) - vec3(1,1,1));
	}while (dot(p,p) <= 1.0);
	return p;
}



vec3 Color(Ray r) {
	vec3 color = vec3(0.0f,0.0f,0.0f);
	hit_record rec;
	bool state = false;
	int i = 0;
	while(!state){
		if (hit_all_spheres(r,0.0,3,rec)){
			vec3 target = rec.p + rec.normal + random_in_unit_sphere();
			r = Ray(rec.p, target - rec.p);
			i++;
		}
		else{
			vec3 unit_direction = normalize(r.direction);
			float t = 0.5f * (unit_direction.y + 1.0f);
			color = (1.0f - t) * vec3(1.0f, 1.0f, 1.0f) + t * vec3(0.5f,0.7f,1.0f);
			state = true;
		}
	}
	return color * pow(0.5f,i);
}



void main() {
	int ns = 8;
	vec3 color = vec3(0.0f,0.0f,0.0f);
	float i = gl_GlobalInvocationID.x;
	float j = height - gl_GlobalInvocationID.y;
	for(int s=0; s<ns;s++){
		float u = float(i + noise()) / width;
		float v = float(j + noise()) / height;
		Ray r = get_ray(u,v);
		color += Color(r);
	}
	color /= float(ns);
	color = vec3(sqrt(color.x),sqrt(color.y),sqrt(color.z));
	imageStore(ColorImg,ivec2(gl_GlobalInvocationID.xy), vec4(color,1));
}
